// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package repo

import (
	"context"
)

const createUrlMapping = `-- name: CreateUrlMapping :one
INSERT INTO url_mapping (
  longurl, shortcode, owner
) VALUES (
  ?, ?, ?
)
RETURNING id, longurl, shortcode, owner
`

type CreateUrlMappingParams struct {
	Longurl   string
	Shortcode string
	Owner     string
}

func (q *Queries) CreateUrlMapping(ctx context.Context, arg CreateUrlMappingParams) (UrlMapping, error) {
	row := q.db.QueryRowContext(ctx, createUrlMapping, arg.Longurl, arg.Shortcode, arg.Owner)
	var i UrlMapping
	err := row.Scan(
		&i.ID,
		&i.Longurl,
		&i.Shortcode,
		&i.Owner,
	)
	return i, err
}

const deleteUrlMapping = `-- name: DeleteUrlMapping :exec
DELETE FROM url_mapping
WHERE id = ?
`

func (q *Queries) DeleteUrlMapping(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUrlMapping, id)
	return err
}

const getUrlMapping = `-- name: GetUrlMapping :one
SELECT id, longurl, shortcode, owner FROM url_mapping
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUrlMapping(ctx context.Context, id int64) (UrlMapping, error) {
	row := q.db.QueryRowContext(ctx, getUrlMapping, id)
	var i UrlMapping
	err := row.Scan(
		&i.ID,
		&i.Longurl,
		&i.Shortcode,
		&i.Owner,
	)
	return i, err
}

const getUrlMappingByLongurl = `-- name: GetUrlMappingByLongurl :one
SELECT id, longurl, shortcode, owner FROM url_mapping
WHERE longurl = ? LIMIT 1
`

func (q *Queries) GetUrlMappingByLongurl(ctx context.Context, longurl string) (UrlMapping, error) {
	row := q.db.QueryRowContext(ctx, getUrlMappingByLongurl, longurl)
	var i UrlMapping
	err := row.Scan(
		&i.ID,
		&i.Longurl,
		&i.Shortcode,
		&i.Owner,
	)
	return i, err
}

const getUrlMappingByShortcode = `-- name: GetUrlMappingByShortcode :one
SELECT id, longurl, shortcode, owner FROM url_mapping
WHERE shortcode = ? LIMIT 1
`

func (q *Queries) GetUrlMappingByShortcode(ctx context.Context, shortcode string) (UrlMapping, error) {
	row := q.db.QueryRowContext(ctx, getUrlMappingByShortcode, shortcode)
	var i UrlMapping
	err := row.Scan(
		&i.ID,
		&i.Longurl,
		&i.Shortcode,
		&i.Owner,
	)
	return i, err
}

const listUrlMapping = `-- name: ListUrlMapping :many
SELECT id, longurl, shortcode, owner FROM url_mapping
ORDER BY shortcode
`

func (q *Queries) ListUrlMapping(ctx context.Context) ([]UrlMapping, error) {
	rows, err := q.db.QueryContext(ctx, listUrlMapping)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UrlMapping
	for rows.Next() {
		var i UrlMapping
		if err := rows.Scan(
			&i.ID,
			&i.Longurl,
			&i.Shortcode,
			&i.Owner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUrlMapping = `-- name: UpdateUrlMapping :one
UPDATE url_mapping
set longurl = ?,
shortcode = ?,
owner = ?
WHERE id = ?
RETURNING id, longurl, shortcode, owner
`

type UpdateUrlMappingParams struct {
	Longurl   string
	Shortcode string
	Owner     string
	ID        int64
}

func (q *Queries) UpdateUrlMapping(ctx context.Context, arg UpdateUrlMappingParams) (UrlMapping, error) {
	row := q.db.QueryRowContext(ctx, updateUrlMapping,
		arg.Longurl,
		arg.Shortcode,
		arg.Owner,
		arg.ID,
	)
	var i UrlMapping
	err := row.Scan(
		&i.ID,
		&i.Longurl,
		&i.Shortcode,
		&i.Owner,
	)
	return i, err
}
